{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:4000/user/register\", userData).then(res => alert(\"User registered successfully! You can log in now. \"), history.push(\"/register\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:4000/user/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["C:/Users/thinkpad/source/Projects/JobHunt/frontend/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","alert","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACIC,UADJ,EAEIC,gBAFJ,EAGIC,YAHJ,QAIO,SAJP,C,CAMA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DT,EAAAA,KAAK,CACAU,IADL,CACU,qCADV,EACiDH,QADjD,EAEKI,IAFL,CAEUC,GAAG,IAAIC,KAAK,CAAC,oDAAD,CAFtB,EAE6EL,OAAO,CAACM,IAAR,CAAa,WAAb,CAF7E,EAEwG;AAFxG,GAGKC,KAHL,CAGWC,GAAG,IACNP,QAAQ,CAAC;AACLQ,IAAAA,IAAI,EAAEd,UADD;AAELe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,GAAD,CAJhB;AASH,CAVM,C,CAYP;;AACA,OAAO,MAAMC,SAAS,GAAGd,QAAQ,IAAIE,QAAQ,IAAI;AAC7CT,EAAAA,KAAK,CACJU,IADD,CACM,kCADN,EAC0CH,QAD1C,EAECI,IAFD,CAEMC,GAAG,IAAI;AACT;AACA;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAYV,GAAG,CAACQ,IAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJS,CAKT;;AACArB,IAAAA,YAAY,CAACqB,KAAD,CAAZ,CANS,CAOT;;AACA,UAAMG,OAAO,GAAGvB,UAAU,CAACoB,KAAD,CAA1B,CARS,CAST;;AACAb,IAAAA,QAAQ,CAACiB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,GAbD,EAcCV,KAdD,CAcOC,GAAG,IACFP,QAAQ,CAAC;AACTQ,IAAAA,IAAI,EAAEd,UADG;AAETe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFb,GAAD,CAfhB;AAoBH,CArBM,C,CAuBP;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAO;AACHR,IAAAA,IAAI,EAAEb,gBADH;AAEHc,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAChC,SAAO;AACHV,IAAAA,IAAI,EAAEZ;AADH,GAAP;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAMuB,UAAU,GAAG,MAAMnB,QAAQ,IAAI;AACxC;AACAc,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAFwC,CAGxC;;AACA5B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJwC,CAKxC;;AACAQ,EAAAA,QAAQ,CAACiB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAPM","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n    GET_ERRORS,\r\n    SET_CURRENT_USER,\r\n    USER_LOADING\r\n} from \"./types\";\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n    axios\r\n        .post(\"http://localhost:4000/user/register\", userData)\r\n        .then(res => alert(\"User registered successfully! You can log in now. \"),history.push(\"/register\")) // re-direct to login on successful register\r\n        .catch(err =>\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data,\r\n            })\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n    axios\r\n    .post(\"http://localhost:4000/user/login\", userData)\r\n    .then(res => {\r\n        // Save to localStorage\r\n        // Set token to localStorage\r\n        const { token } = res.data;\r\n        localStorage.setItem(\"jwtToken\", token);\r\n        // Set token to Auth header\r\n        setAuthToken(token);\r\n        // Decode token to get user data\r\n        const decoded = jwt_decode(token);\r\n        // Set current user\r\n        dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n            dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded\r\n    };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n    return {\r\n        type: USER_LOADING\r\n    };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n    // Remove token from local storage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    // Remove auth header for future requests\r\n    setAuthToken(false);\r\n    // Set current user to empty object {} which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n};"]},"metadata":{},"sourceType":"module"}